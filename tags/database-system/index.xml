<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Database System on FunForever</title>
    <link>http://yl4869.github.io/tags/database-system/</link>
    <description>Recent content in Database System on FunForever</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 02 Sep 2022 23:45:14 +0800</lastBuildDate>
    <atom:link href="http://yl4869.github.io/tags/database-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据库系统（一）</title>
      <link>http://yl4869.github.io/posts/database_systems/dbs1/</link>
      <pubDate>Fri, 02 Sep 2022 23:45:14 +0800</pubDate>
      <guid>http://yl4869.github.io/posts/database_systems/dbs1/</guid>
      <description>&lt;h1 id=&#34;数据库系统&#34;&gt;数据库系统&lt;/h1&gt;
&lt;h2 id=&#34;数据库&#34;&gt;数据库&lt;/h2&gt;
&lt;p&gt;什么是数据库？   &lt;br&gt;
将信息以某种形式存储在一起。&lt;/p&gt;
&lt;p&gt;数据库的重要位置     &lt;br&gt;
系统软件之一，为多种应用软件提供基础。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意数据库（Database）与数据库管理系统（Database management system，DBMS）的区别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;传统数据整理&#34;&gt;传统数据整理&lt;/h2&gt;
&lt;p&gt;传统数据整理的方式：一种方式为 CSV 的表格式存储。&lt;/p&gt;
&lt;p&gt;缺点：安全性，效率性，使用时的复杂度等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如无法保证在数字栏插入的一定是数字。检索需要遍历，出现问题容易直接崩溃等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;早期的dbms&#34;&gt;早期的DBMS&lt;/h2&gt;
&lt;p&gt;DBMS：软件层面上对数据模型进行定义，提供了增删改查等功能。&lt;/p&gt;
&lt;p&gt;早期的数据模型：逻辑与物理紧密结合，必须对特定的数据库场景安排对应的处理应用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根本原因为物理存储上直接采用应用对数据格式，位置等进行规定，因此切换场景等都需要重新进行设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;关系模型&#34;&gt;关系模型&lt;/h2&gt;
&lt;p&gt;基于关系定义了一种数据模型的抽象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用一种简单的数据结构（关系）进行数据库存储&lt;/li&gt;
&lt;li&gt;用户操作基于高级语言，DBMS 负责具体执行策略&lt;/li&gt;
&lt;li&gt;物理存储由 DBMS 负责实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;关系模型是将无序的各种数据通过关系串联起来，而对这些数据的操作和物理存储的实现都交给了 DBMS，因此使用者可以相对透明的完成对数据的处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关系模型也定义了三个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据结构&lt;/li&gt;
&lt;li&gt;数据操作&lt;/li&gt;
&lt;li&gt;数据约束&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;关系模型利用了数学上的关系定义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;主键与外键&#34;&gt;主键与外键&lt;/h3&gt;
&lt;p&gt;主键：每个关系中唯一的键，作为该关系的关键字。（如省略，一般会自动生成）&lt;/p&gt;
&lt;p&gt;外键：提供关系与关系间的纽带。&lt;/p&gt;
&lt;h2 id=&#34;dml&#34;&gt;DML&lt;/h2&gt;
&lt;p&gt;Data Manipulation Languages，数据操作语言，用来操作数据库表中的记录。&lt;/p&gt;
&lt;p&gt;中文可以理解成&lt;strong&gt;增删改查&lt;/strong&gt;四种操作。&lt;/p&gt;
&lt;p&gt;常见的两种分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Procedural:  指定了做什么，和如何做&lt;/li&gt;
&lt;li&gt;Non-Procedural(Declaratice):   仅仅指定了做什么&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关系代数&#34;&gt;关系代数&lt;/h2&gt;
&lt;p&gt;关系代数是对关系模型中各种运算操作的集合（前面说了关系模型其实是一种数学的关系定义）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意和数学上的关系运算并不完全相同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“选择”、“投影”、笛卡尔积（也叫做“叉积”或“交叉连接”）、并集、差集、“重命名”、“自然连接”。&lt;/p&gt;
&lt;p&gt;利用关系代数我们可以解释两种 DML 的不同之处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Procedural：σb id=102(R ▷◁ S)，既解释了做什么，也解释了如何做&lt;/li&gt;
&lt;li&gt;Non-Procedural：(retrieve the joined tuples from R and S where bid equals 102，只说明了做什么，没有说明如何做，指定关系代数顺序）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;第二种交给了 DBMS 来完成。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
